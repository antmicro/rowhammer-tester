PAYLOAD_EXECUTOR
================



        Executes the DRAM payload from memory


    **Instruction decoder**

    All instructions are 32-bit. The format of most instructions is the same,
    except for the LOOP instruction, which has a constant TIMESLICE of 1.

    NOOP with a TIMESLICE of 0 is a special case which is interpreted as
    STOP instruction. When this instruction is encountered execution gets
    finished immediately.

    **NOTE:** TIMESLICE is the number of cycles the instruction will take. This
    means that instructions other than NOOP that use TIMESLICE=0 are illegal
    (although will silently be executed as having TIMESLICE=1).

    **NOTE2:** LOOP instruction will *jump* COUNT times, meaning that the "code"
    inside the loop will effectively be executed COUNT+1 times.

    Op codes:

+------+-------+
+ Op   + Value +
+======+=======+
+ NOOP | 0b000 +
+------+-------+
+ LOOP | 0b111 +
+------+-------+
+ ACT  | 0b100 +
+------+-------+
+ PRE  | 0b101 +
+------+-------+
+ REF  | 0b110 +
+------+-------+
+ ZQC  | 0b001 +
+------+-------+
+ READ | 0b010 +
+------+-------+

    Instruction format::

              LSB                       MSB
        dfi:  OP_CODE | TIMESLICE | ADDRESS
        noop: OP_CODE | TIMESLICE_NOOP
        loop: OP_CODE | COUNT     | JUMP
        stop: <NOOP>  | 0

    Where ADDRESS depends on the DFI command and is one of::

        LSB              MSB
        RANK | BANK | COLUMN
        RANK | BANK | ROW



Register Listing for PAYLOAD_EXECUTOR
-------------------------------------

+--------------------------------------------------------------------+--------------------------------------------------+
| Register                                                           | Address                                          |
+====================================================================+==================================================+
| :ref:`PAYLOAD_EXECUTOR_START <PAYLOAD_EXECUTOR_START>`             | :ref:`0xf0004000 <PAYLOAD_EXECUTOR_START>`       |
+--------------------------------------------------------------------+--------------------------------------------------+
| :ref:`PAYLOAD_EXECUTOR_STATUS <PAYLOAD_EXECUTOR_STATUS>`           | :ref:`0xf0004004 <PAYLOAD_EXECUTOR_STATUS>`      |
+--------------------------------------------------------------------+--------------------------------------------------+
| :ref:`PAYLOAD_EXECUTOR_READ_COUNT <PAYLOAD_EXECUTOR_READ_COUNT>`   | :ref:`0xf0004008 <PAYLOAD_EXECUTOR_READ_COUNT>`  |
+--------------------------------------------------------------------+--------------------------------------------------+
| :ref:`PAYLOAD_EXECUTOR_EXEC_START1 <PAYLOAD_EXECUTOR_EXEC_START1>` | :ref:`0xf000400c <PAYLOAD_EXECUTOR_EXEC_START1>` |
+--------------------------------------------------------------------+--------------------------------------------------+
| :ref:`PAYLOAD_EXECUTOR_EXEC_START0 <PAYLOAD_EXECUTOR_EXEC_START0>` | :ref:`0xf0004010 <PAYLOAD_EXECUTOR_EXEC_START0>` |
+--------------------------------------------------------------------+--------------------------------------------------+
| :ref:`PAYLOAD_EXECUTOR_EXEC_STOP1 <PAYLOAD_EXECUTOR_EXEC_STOP1>`   | :ref:`0xf0004014 <PAYLOAD_EXECUTOR_EXEC_STOP1>`  |
+--------------------------------------------------------------------+--------------------------------------------------+
| :ref:`PAYLOAD_EXECUTOR_EXEC_STOP0 <PAYLOAD_EXECUTOR_EXEC_STOP0>`   | :ref:`0xf0004018 <PAYLOAD_EXECUTOR_EXEC_STOP0>`  |
+--------------------------------------------------------------------+--------------------------------------------------+

PAYLOAD_EXECUTOR_START
^^^^^^^^^^^^^^^^^^^^^^

`Address: 0xf0004000 + 0x0 = 0xf0004000`

    Writing to this register initializes payload execution

    .. wavedrom::
        :caption: PAYLOAD_EXECUTOR_START

        {
            "reg": [
                {"name": "start", "bits": 1},
                {"bits": 31},
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }


PAYLOAD_EXECUTOR_STATUS
^^^^^^^^^^^^^^^^^^^^^^^

`Address: 0xf0004000 + 0x4 = 0xf0004004`

    Payload executor status register

    .. wavedrom::
        :caption: PAYLOAD_EXECUTOR_STATUS

        {
            "reg": [
                {"name": "ready",  "bits": 1},
                {"name": "overflow",  "bits": 1},
                {"bits": 30}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }


+-------+----------+---------------------------------------------------------------------------------+
| Field | Name     | Description                                                                     |
+=======+==========+=================================================================================+
| [0]   | READY    | Indicates that the executor is not running                                      |
+-------+----------+---------------------------------------------------------------------------------+
| [1]   | OVERFLOW | Indicates the scratchpad memory address counter has overflown due to the number |
|       |          | of READ commands sent during execution                                          |
+-------+----------+---------------------------------------------------------------------------------+

PAYLOAD_EXECUTOR_READ_COUNT
^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Address: 0xf0004000 + 0x8 = 0xf0004008`

    Number of data from READ commands that is stored in the scratchpad memory

    .. wavedrom::
        :caption: PAYLOAD_EXECUTOR_READ_COUNT

        {
            "reg": [
                {"name": "read_count[3:0]", "bits": 4},
                {"bits": 28},
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }


PAYLOAD_EXECUTOR_EXEC_START1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Address: 0xf0004000 + 0xc = 0xf000400c`

    Bits 32-63 of `PAYLOAD_EXECUTOR_EXEC_START`. Number of cycles elapsed until the
    start of the payload execution.

    .. wavedrom::
        :caption: PAYLOAD_EXECUTOR_EXEC_START1

        {
            "reg": [
                {"name": "exec_start[63:32]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


PAYLOAD_EXECUTOR_EXEC_START0
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Address: 0xf0004000 + 0x10 = 0xf0004010`

    Bits 0-31 of `PAYLOAD_EXECUTOR_EXEC_START`.

    .. wavedrom::
        :caption: PAYLOAD_EXECUTOR_EXEC_START0

        {
            "reg": [
                {"name": "exec_start[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


PAYLOAD_EXECUTOR_EXEC_STOP1
^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Address: 0xf0004000 + 0x14 = 0xf0004014`

    Bits 32-63 of `PAYLOAD_EXECUTOR_EXEC_STOP`. Number of cycles elapsed until the
    end of the payload execution.

    .. wavedrom::
        :caption: PAYLOAD_EXECUTOR_EXEC_STOP1

        {
            "reg": [
                {"name": "exec_stop[63:32]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


PAYLOAD_EXECUTOR_EXEC_STOP0
^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Address: 0xf0004000 + 0x18 = 0xf0004018`

    Bits 0-31 of `PAYLOAD_EXECUTOR_EXEC_STOP`.

    .. wavedrom::
        :caption: PAYLOAD_EXECUTOR_EXEC_STOP0

        {
            "reg": [
                {"name": "exec_stop[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


